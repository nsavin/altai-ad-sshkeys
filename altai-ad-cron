#!/usr/bin/python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

#    Copyright (C) GridDynamics Openstack Core Team, GridDynamics
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 2.1 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json
import httplib2
import logging
import os
import pwd
import subprocess as sp
import sys


#TODO - change it to 169.254.169.254 and add forwarding rule
URL = "http://172.18.40.107:8659"
COMMENT = 'added by ad-sync'
ENABLED = '/bin/bash'
DISABLED= '/sbin/nologin'

LOG = logging.getLogger(__name__)
console = logging.StreamHandler()
console.setLevel(logging.INFO)
LOG.addHandler(console)

sysusers, adusers, adusers_blocked = set('root'), set(), set()
for x in pwd.getpwall():
    if x.pw_gecos == COMMENT:
	adusers.add(x.pw_name)
	if x.pw_shell == DISABLED:
	    adusers_blocked.add(x.pw_name)
    else:
	sysusers.add(x.pw_name)

try: 
    resp, cont = httplib2.Http().request(URL)
    if resp.status != 200: 
	raise Exception(resp.status)
    users = json.loads(cont)
except Exception as e:
    LOG.error('Error: %s', e)
    sys.exit(1)

for user_rec in users:
    user = user_rec['id']
    enabled = user_rec['enabled']
    ssh_keys = user_rec['ssh_keys']
    if user in sysusers:
	LOG.warn('user %s: skip as system user', user)
	continue
    if user in adusers:
	if not enabled:
	    if user not in adusers_blocked:
		LOG.warn('user %s: disable', user)
		#TODO check for open session and close 
		sp.call(['/usr/sbin/usermod',
		    '-s', DISABLED,
		    user
		])
	else:
	    if user in adusers_blocked:
		LOG.warn('user %s: enable', user)
		sp.call(['/usr/sbin/usermod',
		    '-s', ENABLED,
		    user
		])
    else:
	LOG.warn('user %s: add', user)
	sp.call([
	    '/usr/sbin/useradd', 
	    '-c', COMMENT, '-G', 'wheel',
	    '-m', '-U', 
	    '-p', '*', 
	    '-s', ENABLED if enabled else DISABLED,
	    user
	])
    dir = "/home/%s/.ssh" % user
    if not os.path.exists(dir):
	os.makedirs(dir)
    authorized_keys = open(dir+'/authorized_keys','w')
    for key in ssh_keys:
	authorized_keys.write(key)
    authorized_keys.close()
    
users_set = set([x['id'] for x in users])
for user in adusers:
    if user in users_set:
	continue
    #TODO check for open session and close 
    sp.call([
	'/usr/sbin/userdel', 
	'-f', '-r',
        user
    ])
    LOG.warn('user %s: deleted', user)
